-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Radix2wECC_Radix2wECC_Pipeline_VITIS_LOOP_77_7 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_Result_54 : IN STD_LOGIC_VECTOR (191 downto 0);
    buff2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    buff2_ce0 : OUT STD_LOGIC;
    buff2_we0 : OUT STD_LOGIC;
    buff2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_Result_55 : IN STD_LOGIC_VECTOR (191 downto 0);
    buff3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    buff3_ce0 : OUT STD_LOGIC;
    buff3_we0 : OUT STD_LOGIC;
    buff3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Radix2wECC_Radix2wECC_Pipeline_VITIS_LOOP_77_7 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_1F : STD_LOGIC_VECTOR (7 downto 0) := "00011111";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv8_BF : STD_LOGIC_VECTOR (7 downto 0) := "10111111";
    constant ap_const_lv192_lc_4 : STD_LOGIC_VECTOR (191 downto 0) := "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln77_fu_100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal i_29_reg_329 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sub_ln708_3_fu_184_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln708_3_reg_337 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln708_fu_194_p2 : STD_LOGIC_VECTOR (191 downto 0);
    signal lshr_ln708_reg_342 : STD_LOGIC_VECTOR (191 downto 0);
    signal sub_ln708_7_fu_258_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln708_7_reg_347 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln708_2_fu_268_p2 : STD_LOGIC_VECTOR (191 downto 0);
    signal lshr_ln708_2_reg_352 : STD_LOGIC_VECTOR (191 downto 0);
    signal trunc_ln78_cast15_fu_279_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_50 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_30_fu_106_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_29 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln3_fu_112_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln708_fu_120_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln708_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln708_fu_142_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln708_2_fu_154_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_132_p4 : STD_LOGIC_VECTOR (191 downto 0);
    signal sub_ln708_1_fu_148_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln708_fu_160_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln708_2_fu_176_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln708_1_fu_168_p3 : STD_LOGIC_VECTOR (191 downto 0);
    signal zext_ln708_fu_190_p1 : STD_LOGIC_VECTOR (191 downto 0);
    signal icmp_ln708_1_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln708_4_fu_216_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln708_6_fu_228_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_206_p4 : STD_LOGIC_VECTOR (191 downto 0);
    signal sub_ln708_5_fu_222_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln708_3_fu_234_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln708_5_fu_250_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln708_4_fu_242_p3 : STD_LOGIC_VECTOR (191 downto 0);
    signal zext_ln708_2_fu_264_p1 : STD_LOGIC_VECTOR (191 downto 0);
    signal zext_ln708_1_fu_284_p1 : STD_LOGIC_VECTOR (191 downto 0);
    signal lshr_ln708_1_fu_287_p2 : STD_LOGIC_VECTOR (191 downto 0);
    signal p_Result_s_fu_293_p2 : STD_LOGIC_VECTOR (191 downto 0);
    signal zext_ln708_3_fu_303_p1 : STD_LOGIC_VECTOR (191 downto 0);
    signal lshr_ln708_3_fu_306_p2 : STD_LOGIC_VECTOR (191 downto 0);
    signal p_Result_30_fu_312_p2 : STD_LOGIC_VECTOR (191 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Radix2wECC_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component Radix2wECC_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln77_fu_100_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_50 <= i_30_fu_106_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_50 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_29_reg_329 <= ap_sig_allocacmp_i_29;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln77_fu_100_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                lshr_ln708_2_reg_352 <= lshr_ln708_2_fu_268_p2;
                lshr_ln708_reg_342 <= lshr_ln708_fu_194_p2;
                    sub_ln708_3_reg_337(7 downto 1) <= sub_ln708_3_fu_184_p2(7 downto 1);
                    sub_ln708_7_reg_347(7 downto 1) <= sub_ln708_7_fu_258_p2(7 downto 1);
            end if;
        end if;
    end process;
    sub_ln708_3_reg_337(0) <= '0';
    sub_ln708_7_reg_347(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln77_fu_100_p2)
    begin
        if (((icmp_ln77_fu_100_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_29_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_50, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_29 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_29 <= i_fu_50;
        end if; 
    end process;

    buff2_address0 <= trunc_ln78_cast15_fu_279_p1(3 - 1 downto 0);

    buff2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buff2_ce0 <= ap_const_logic_1;
        else 
            buff2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buff2_d0 <= p_Result_s_fu_293_p2(32 - 1 downto 0);

    buff2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buff2_we0 <= ap_const_logic_1;
        else 
            buff2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buff3_address0 <= trunc_ln78_cast15_fu_279_p1(3 - 1 downto 0);

    buff3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buff3_ce0 <= ap_const_logic_1;
        else 
            buff3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buff3_d0 <= p_Result_30_fu_312_p2(32 - 1 downto 0);

    buff3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buff3_we0 <= ap_const_logic_1;
        else 
            buff3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_30_fu_106_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_29) + unsigned(ap_const_lv3_1));
    icmp_ln708_1_fu_200_p2 <= "1" when (unsigned(shl_ln3_fu_112_p3) > unsigned(or_ln708_fu_120_p2)) else "0";
    icmp_ln708_fu_126_p2 <= "1" when (unsigned(shl_ln3_fu_112_p3) > unsigned(or_ln708_fu_120_p2)) else "0";
    icmp_ln77_fu_100_p2 <= "1" when (ap_sig_allocacmp_i_29 = ap_const_lv3_6) else "0";
    lshr_ln708_1_fu_287_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv192_lc_4),to_integer(unsigned('0' & zext_ln708_1_fu_284_p1(31-1 downto 0)))));
    lshr_ln708_2_fu_268_p2 <= std_logic_vector(shift_right(unsigned(select_ln708_4_fu_242_p3),to_integer(unsigned('0' & zext_ln708_2_fu_264_p1(31-1 downto 0)))));
    lshr_ln708_3_fu_306_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv192_lc_4),to_integer(unsigned('0' & zext_ln708_3_fu_303_p1(31-1 downto 0)))));
    lshr_ln708_fu_194_p2 <= std_logic_vector(shift_right(unsigned(select_ln708_1_fu_168_p3),to_integer(unsigned('0' & zext_ln708_fu_190_p1(31-1 downto 0)))));
    or_ln708_fu_120_p2 <= (shl_ln3_fu_112_p3 or ap_const_lv8_1F);
    p_Result_30_fu_312_p2 <= (lshr_ln708_3_fu_306_p2 and lshr_ln708_2_reg_352);
    p_Result_s_fu_293_p2 <= (lshr_ln708_reg_342 and lshr_ln708_1_fu_287_p2);
    select_ln708_1_fu_168_p3 <= 
        tmp_fu_132_p4 when (icmp_ln708_fu_126_p2(0) = '1') else 
        p_Result_54;
    select_ln708_2_fu_176_p3 <= 
        sub_ln708_1_fu_148_p2 when (icmp_ln708_fu_126_p2(0) = '1') else 
        shl_ln3_fu_112_p3;
    select_ln708_3_fu_234_p3 <= 
        sub_ln708_4_fu_216_p2 when (icmp_ln708_1_fu_200_p2(0) = '1') else 
        sub_ln708_6_fu_228_p2;
    select_ln708_4_fu_242_p3 <= 
        tmp_12_fu_206_p4 when (icmp_ln708_1_fu_200_p2(0) = '1') else 
        p_Result_55;
    select_ln708_5_fu_250_p3 <= 
        sub_ln708_5_fu_222_p2 when (icmp_ln708_1_fu_200_p2(0) = '1') else 
        shl_ln3_fu_112_p3;
    select_ln708_fu_160_p3 <= 
        sub_ln708_fu_142_p2 when (icmp_ln708_fu_126_p2(0) = '1') else 
        sub_ln708_2_fu_154_p2;
    shl_ln3_fu_112_p3 <= (ap_sig_allocacmp_i_29 & ap_const_lv5_0);
    sub_ln708_1_fu_148_p2 <= std_logic_vector(signed(ap_const_lv8_BF) - signed(shl_ln3_fu_112_p3));
    sub_ln708_2_fu_154_p2 <= std_logic_vector(unsigned(or_ln708_fu_120_p2) - unsigned(shl_ln3_fu_112_p3));
    sub_ln708_3_fu_184_p2 <= std_logic_vector(signed(ap_const_lv8_BF) - signed(select_ln708_fu_160_p3));
    sub_ln708_4_fu_216_p2 <= std_logic_vector(unsigned(shl_ln3_fu_112_p3) - unsigned(or_ln708_fu_120_p2));
    sub_ln708_5_fu_222_p2 <= std_logic_vector(signed(ap_const_lv8_BF) - signed(shl_ln3_fu_112_p3));
    sub_ln708_6_fu_228_p2 <= std_logic_vector(unsigned(or_ln708_fu_120_p2) - unsigned(shl_ln3_fu_112_p3));
    sub_ln708_7_fu_258_p2 <= std_logic_vector(signed(ap_const_lv8_BF) - signed(select_ln708_3_fu_234_p3));
    sub_ln708_fu_142_p2 <= std_logic_vector(unsigned(shl_ln3_fu_112_p3) - unsigned(or_ln708_fu_120_p2));
    
    tmp_12_fu_206_p4_proc : process(p_Result_55)
    variable vlo_cpy : STD_LOGIC_VECTOR(192+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(192+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(192 - 1 downto 0);
    variable tmp_12_fu_206_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(192 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(192 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(192 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(8 - 1 downto 0) := ap_const_lv32_BF(8 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(8 - 1 downto 0) := ap_const_lv32_0(8 - 1 downto 0);
        v0_cpy := p_Result_55;
        if (vlo_cpy(8 - 1 downto 0) > vhi_cpy(8 - 1 downto 0)) then
            vhi_cpy(8-1 downto 0) := std_logic_vector(192-1-unsigned(ap_const_lv32_0(8-1 downto 0)));
            vlo_cpy(8-1 downto 0) := std_logic_vector(192-1-unsigned(ap_const_lv32_BF(8-1 downto 0)));
            for tmp_12_fu_206_p4_i in 0 to 192-1 loop
                v0_cpy(tmp_12_fu_206_p4_i) := p_Result_55(192-1-tmp_12_fu_206_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(8-1 downto 0)))));

        section := (others=>'0');
        section(8-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(8-1 downto 0)) - unsigned(vlo_cpy(8-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(192-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_12_fu_206_p4 <= resvalue(192-1 downto 0);
    end process;

    
    tmp_fu_132_p4_proc : process(p_Result_54)
    variable vlo_cpy : STD_LOGIC_VECTOR(192+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(192+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(192 - 1 downto 0);
    variable tmp_fu_132_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(192 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(192 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(192 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(8 - 1 downto 0) := ap_const_lv32_BF(8 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(8 - 1 downto 0) := ap_const_lv32_0(8 - 1 downto 0);
        v0_cpy := p_Result_54;
        if (vlo_cpy(8 - 1 downto 0) > vhi_cpy(8 - 1 downto 0)) then
            vhi_cpy(8-1 downto 0) := std_logic_vector(192-1-unsigned(ap_const_lv32_0(8-1 downto 0)));
            vlo_cpy(8-1 downto 0) := std_logic_vector(192-1-unsigned(ap_const_lv32_BF(8-1 downto 0)));
            for tmp_fu_132_p4_i in 0 to 192-1 loop
                v0_cpy(tmp_fu_132_p4_i) := p_Result_54(192-1-tmp_fu_132_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(8-1 downto 0)))));

        section := (others=>'0');
        section(8-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(8-1 downto 0)) - unsigned(vlo_cpy(8-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(192-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_132_p4 <= resvalue(192-1 downto 0);
    end process;

    trunc_ln78_cast15_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_29_reg_329),64));
    zext_ln708_1_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln708_3_reg_337),192));
    zext_ln708_2_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln708_5_fu_250_p3),192));
    zext_ln708_3_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln708_7_reg_347),192));
    zext_ln708_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln708_2_fu_176_p3),192));
end behav;
