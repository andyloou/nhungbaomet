// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Radix2wECC_Radix2wECC_Pipeline_VITIS_LOOP_77_7 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_Result_54,
        buff2_address0,
        buff2_ce0,
        buff2_we0,
        buff2_d0,
        p_Result_55,
        buff3_address0,
        buff3_ce0,
        buff3_we0,
        buff3_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [191:0] p_Result_54;
output  [2:0] buff2_address0;
output   buff2_ce0;
output   buff2_we0;
output  [31:0] buff2_d0;
input  [191:0] p_Result_55;
output  [2:0] buff3_address0;
output   buff3_ce0;
output   buff3_we0;
output  [31:0] buff3_d0;

reg ap_idle;
reg buff2_ce0;
reg buff2_we0;
reg buff3_ce0;
reg buff3_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln77_fu_100_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [2:0] i_29_reg_329;
wire    ap_block_pp0_stage0_11001;
wire   [7:0] sub_ln708_3_fu_184_p2;
reg   [7:0] sub_ln708_3_reg_337;
wire   [191:0] lshr_ln708_fu_194_p2;
reg   [191:0] lshr_ln708_reg_342;
wire   [7:0] sub_ln708_7_fu_258_p2;
reg   [7:0] sub_ln708_7_reg_347;
wire   [191:0] lshr_ln708_2_fu_268_p2;
reg   [191:0] lshr_ln708_2_reg_352;
wire   [63:0] trunc_ln78_cast15_fu_279_p1;
wire    ap_block_pp0_stage0;
reg   [2:0] i_fu_50;
wire   [2:0] i_30_fu_106_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i_29;
wire   [7:0] shl_ln3_fu_112_p3;
wire   [7:0] or_ln708_fu_120_p2;
wire   [0:0] icmp_ln708_fu_126_p2;
wire   [7:0] sub_ln708_fu_142_p2;
wire   [7:0] sub_ln708_2_fu_154_p2;
reg   [191:0] tmp_fu_132_p4;
wire   [7:0] sub_ln708_1_fu_148_p2;
wire   [7:0] select_ln708_fu_160_p3;
wire   [7:0] select_ln708_2_fu_176_p3;
wire   [191:0] select_ln708_1_fu_168_p3;
wire   [191:0] zext_ln708_fu_190_p1;
wire   [0:0] icmp_ln708_1_fu_200_p2;
wire   [7:0] sub_ln708_4_fu_216_p2;
wire   [7:0] sub_ln708_6_fu_228_p2;
reg   [191:0] tmp_12_fu_206_p4;
wire   [7:0] sub_ln708_5_fu_222_p2;
wire   [7:0] select_ln708_3_fu_234_p3;
wire   [7:0] select_ln708_5_fu_250_p3;
wire   [191:0] select_ln708_4_fu_242_p3;
wire   [191:0] zext_ln708_2_fu_264_p1;
wire   [191:0] zext_ln708_1_fu_284_p1;
wire   [191:0] lshr_ln708_1_fu_287_p2;
wire   [191:0] p_Result_s_fu_293_p2;
wire   [191:0] zext_ln708_3_fu_303_p1;
wire   [191:0] lshr_ln708_3_fu_306_p2;
wire   [191:0] p_Result_30_fu_312_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Radix2wECC_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln77_fu_100_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_50 <= i_30_fu_106_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_50 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_29_reg_329 <= ap_sig_allocacmp_i_29;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln77_fu_100_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lshr_ln708_2_reg_352 <= lshr_ln708_2_fu_268_p2;
        lshr_ln708_reg_342 <= lshr_ln708_fu_194_p2;
        sub_ln708_3_reg_337[7 : 1] <= sub_ln708_3_fu_184_p2[7 : 1];
        sub_ln708_7_reg_347[7 : 1] <= sub_ln708_7_fu_258_p2[7 : 1];
    end
end

always @ (*) begin
    if (((icmp_ln77_fu_100_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_29 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_29 = i_fu_50;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff2_ce0 = 1'b1;
    end else begin
        buff2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff2_we0 = 1'b1;
    end else begin
        buff2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff3_ce0 = 1'b1;
    end else begin
        buff3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff3_we0 = 1'b1;
    end else begin
        buff3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign buff2_address0 = trunc_ln78_cast15_fu_279_p1;

assign buff2_d0 = p_Result_s_fu_293_p2[31:0];

assign buff3_address0 = trunc_ln78_cast15_fu_279_p1;

assign buff3_d0 = p_Result_30_fu_312_p2[31:0];

assign i_30_fu_106_p2 = (ap_sig_allocacmp_i_29 + 3'd1);

assign icmp_ln708_1_fu_200_p2 = ((shl_ln3_fu_112_p3 > or_ln708_fu_120_p2) ? 1'b1 : 1'b0);

assign icmp_ln708_fu_126_p2 = ((shl_ln3_fu_112_p3 > or_ln708_fu_120_p2) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_100_p2 = ((ap_sig_allocacmp_i_29 == 3'd6) ? 1'b1 : 1'b0);

assign lshr_ln708_1_fu_287_p2 = 192'd6277101735386680763835789423207666416102355444464034512895 >> zext_ln708_1_fu_284_p1;

assign lshr_ln708_2_fu_268_p2 = select_ln708_4_fu_242_p3 >> zext_ln708_2_fu_264_p1;

assign lshr_ln708_3_fu_306_p2 = 192'd6277101735386680763835789423207666416102355444464034512895 >> zext_ln708_3_fu_303_p1;

assign lshr_ln708_fu_194_p2 = select_ln708_1_fu_168_p3 >> zext_ln708_fu_190_p1;

assign or_ln708_fu_120_p2 = (shl_ln3_fu_112_p3 | 8'd31);

assign p_Result_30_fu_312_p2 = (lshr_ln708_3_fu_306_p2 & lshr_ln708_2_reg_352);

assign p_Result_s_fu_293_p2 = (lshr_ln708_reg_342 & lshr_ln708_1_fu_287_p2);

assign select_ln708_1_fu_168_p3 = ((icmp_ln708_fu_126_p2[0:0] == 1'b1) ? tmp_fu_132_p4 : p_Result_54);

assign select_ln708_2_fu_176_p3 = ((icmp_ln708_fu_126_p2[0:0] == 1'b1) ? sub_ln708_1_fu_148_p2 : shl_ln3_fu_112_p3);

assign select_ln708_3_fu_234_p3 = ((icmp_ln708_1_fu_200_p2[0:0] == 1'b1) ? sub_ln708_4_fu_216_p2 : sub_ln708_6_fu_228_p2);

assign select_ln708_4_fu_242_p3 = ((icmp_ln708_1_fu_200_p2[0:0] == 1'b1) ? tmp_12_fu_206_p4 : p_Result_55);

assign select_ln708_5_fu_250_p3 = ((icmp_ln708_1_fu_200_p2[0:0] == 1'b1) ? sub_ln708_5_fu_222_p2 : shl_ln3_fu_112_p3);

assign select_ln708_fu_160_p3 = ((icmp_ln708_fu_126_p2[0:0] == 1'b1) ? sub_ln708_fu_142_p2 : sub_ln708_2_fu_154_p2);

assign shl_ln3_fu_112_p3 = {{ap_sig_allocacmp_i_29}, {5'd0}};

assign sub_ln708_1_fu_148_p2 = ($signed(8'd191) - $signed(shl_ln3_fu_112_p3));

assign sub_ln708_2_fu_154_p2 = (or_ln708_fu_120_p2 - shl_ln3_fu_112_p3);

assign sub_ln708_3_fu_184_p2 = ($signed(8'd191) - $signed(select_ln708_fu_160_p3));

assign sub_ln708_4_fu_216_p2 = (shl_ln3_fu_112_p3 - or_ln708_fu_120_p2);

assign sub_ln708_5_fu_222_p2 = ($signed(8'd191) - $signed(shl_ln3_fu_112_p3));

assign sub_ln708_6_fu_228_p2 = (or_ln708_fu_120_p2 - shl_ln3_fu_112_p3);

assign sub_ln708_7_fu_258_p2 = ($signed(8'd191) - $signed(select_ln708_3_fu_234_p3));

assign sub_ln708_fu_142_p2 = (shl_ln3_fu_112_p3 - or_ln708_fu_120_p2);

integer ap_tvar_int_0;

always @ (p_Result_55) begin
    for (ap_tvar_int_0 = 192 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 191 - 0) begin
            tmp_12_fu_206_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_12_fu_206_p4[ap_tvar_int_0] = p_Result_55[191 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (p_Result_54) begin
    for (ap_tvar_int_1 = 192 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 191 - 0) begin
            tmp_fu_132_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_fu_132_p4[ap_tvar_int_1] = p_Result_54[191 - ap_tvar_int_1];
        end
    end
end

assign trunc_ln78_cast15_fu_279_p1 = i_29_reg_329;

assign zext_ln708_1_fu_284_p1 = sub_ln708_3_reg_337;

assign zext_ln708_2_fu_264_p1 = select_ln708_5_fu_250_p3;

assign zext_ln708_3_fu_303_p1 = sub_ln708_7_reg_347;

assign zext_ln708_fu_190_p1 = select_ln708_2_fu_176_p3;

always @ (posedge ap_clk) begin
    sub_ln708_3_reg_337[0] <= 1'b0;
    sub_ln708_7_reg_347[0] <= 1'b0;
end

endmodule //Radix2wECC_Radix2wECC_Pipeline_VITIS_LOOP_77_7
