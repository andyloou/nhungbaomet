-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Radix2wDPM_point_double_1_Pipeline_VITIS_LOOP_45_12 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_ph1 : IN STD_LOGIC_VECTOR (331 downto 0);
    trunc_ln6 : IN STD_LOGIC_VECTOR (164 downto 0);
    p_out : OUT STD_LOGIC_VECTOR (331 downto 0);
    p_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of Radix2wDPM_point_double_1_Pipeline_VITIS_LOOP_45_12 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_A3 : STD_LOGIC_VECTOR (7 downto 0) := "10100011";
    constant ap_const_lv32_A2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100010";
    constant ap_const_lv166_lc_3 : STD_LOGIC_VECTOR (165 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011001001";
    constant ap_const_lv163_lc_1 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv163_lc_2 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_A6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100110";
    constant ap_const_lv32_14B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln45_fu_114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal i_5_fu_56 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_8_fu_233_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_V_fu_60 : STD_LOGIC_VECTOR (164 downto 0);
    signal trunc_ln38_fu_163_p1 : STD_LOGIC_VECTOR (164 downto 0);
    signal empty_fu_64 : STD_LOGIC_VECTOR (331 downto 0);
    signal select_ln820_fu_225_p3 : STD_LOGIC_VECTOR (331 downto 0);
    signal empty_48_fu_68 : STD_LOGIC_VECTOR (331 downto 0);
    signal select_ln820_3_fu_217_p3 : STD_LOGIC_VECTOR (331 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_V_5_fu_133_p3 : STD_LOGIC_VECTOR (165 downto 0);
    signal p_Result_s_fu_141_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1544_1_fu_149_p2 : STD_LOGIC_VECTOR (165 downto 0);
    signal tmp_V_6_fu_155_p3 : STD_LOGIC_VECTOR (165 downto 0);
    signal zext_ln820_fu_171_p1 : STD_LOGIC_VECTOR (162 downto 0);
    signal shl_ln820_fu_175_p2 : STD_LOGIC_VECTOR (162 downto 0);
    signal p_Val2_10_fu_167_p1 : STD_LOGIC_VECTOR (162 downto 0);
    signal and_ln820_fu_181_p2 : STD_LOGIC_VECTOR (162 downto 0);
    signal lhs_V_fu_193_p4 : STD_LOGIC_VECTOR (165 downto 0);
    signal ret_fu_203_p2 : STD_LOGIC_VECTOR (165 downto 0);
    signal empty_50_fu_129_p1 : STD_LOGIC_VECTOR (165 downto 0);
    signal p_Result_12_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln_fu_209_p3 : STD_LOGIC_VECTOR (331 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Radix2wDPM_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component Radix2wDPM_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    empty_48_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    empty_48_fu_68 <= p_ph1;
                elsif (((icmp_ln45_fu_114_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    empty_48_fu_68 <= select_ln820_3_fu_217_p3;
                end if;
            end if; 
        end if;
    end process;

    empty_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    empty_fu_64 <= p_ph1;
                elsif (((icmp_ln45_fu_114_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    empty_fu_64 <= select_ln820_fu_225_p3;
                end if;
            end if; 
        end if;
    end process;

    i_5_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_5_fu_56 <= ap_const_lv8_1;
                elsif (((icmp_ln45_fu_114_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_5_fu_56 <= i_8_fu_233_p2;
                end if;
            end if; 
        end if;
    end process;

    tmp_V_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    tmp_V_fu_60 <= trunc_ln6;
                elsif (((icmp_ln45_fu_114_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    tmp_V_fu_60 <= trunc_ln38_fu_163_p1;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln820_fu_181_p2 <= (shl_ln820_fu_175_p2 and p_Val2_10_fu_167_p1);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln45_fu_114_p2)
    begin
        if (((icmp_ln45_fu_114_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_50_fu_129_p1 <= empty_fu_64(166 - 1 downto 0);
    i_8_fu_233_p2 <= std_logic_vector(unsigned(i_5_fu_56) + unsigned(ap_const_lv8_1));
    icmp_ln45_fu_114_p2 <= "1" when (i_5_fu_56 = ap_const_lv8_A3) else "0";
    lhs_V_fu_193_p4 <= empty_fu_64(331 downto 166);
    or_ln_fu_209_p3 <= (ret_fu_203_p2 & empty_50_fu_129_p1);
    p_Result_12_fu_187_p2 <= "1" when (and_ln820_fu_181_p2 = ap_const_lv163_lc_2) else "0";
    p_Result_s_fu_141_p3 <= tmp_V_fu_60(162 downto 162);
    p_Val2_10_fu_167_p1 <= empty_48_fu_68(163 - 1 downto 0);
    p_out <= empty_48_fu_68;

    p_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln45_fu_114_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln45_fu_114_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_out_ap_vld <= ap_const_logic_1;
        else 
            p_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ret_fu_203_p2 <= (tmp_V_6_fu_155_p3 xor lhs_V_fu_193_p4);
    select_ln820_3_fu_217_p3 <= 
        empty_48_fu_68 when (p_Result_12_fu_187_p2(0) = '1') else 
        or_ln_fu_209_p3;
    select_ln820_fu_225_p3 <= 
        empty_fu_64 when (p_Result_12_fu_187_p2(0) = '1') else 
        or_ln_fu_209_p3;
    shl_ln820_fu_175_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv163_lc_1),to_integer(unsigned('0' & zext_ln820_fu_171_p1(31-1 downto 0)))));
    tmp_V_5_fu_133_p3 <= (tmp_V_fu_60 & ap_const_lv1_0);
    tmp_V_6_fu_155_p3 <= 
        xor_ln1544_1_fu_149_p2 when (p_Result_s_fu_141_p3(0) = '1') else 
        tmp_V_5_fu_133_p3;
    trunc_ln38_fu_163_p1 <= tmp_V_6_fu_155_p3(165 - 1 downto 0);
    xor_ln1544_1_fu_149_p2 <= (tmp_V_5_fu_133_p3 xor ap_const_lv166_lc_3);
    zext_ln820_fu_171_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_fu_56),163));
end behav;
