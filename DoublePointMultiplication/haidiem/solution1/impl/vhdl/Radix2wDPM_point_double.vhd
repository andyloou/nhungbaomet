-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Radix2wDPM_point_double is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V_read : IN STD_LOGIC_VECTOR (165 downto 0);
    y_V_read : IN STD_LOGIC_VECTOR (162 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (165 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (165 downto 0) );
end;


architecture behav of Radix2wDPM_point_double is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv166_lc_2 : STD_LOGIC_VECTOR (165 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv166_lc_3 : STD_LOGIC_VECTOR (165 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011001001";
    constant ap_const_lv166_lc_1 : STD_LOGIC_VECTOR (165 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv163_lc_1 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_127 : STD_LOGIC_VECTOR (165 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal v_V_2_load_reg_472 : STD_LOGIC_VECTOR (165 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_203_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_477 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal j_2_fu_217_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal j_2_reg_485 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_20_reg_491 : STD_LOGIC_VECTOR (0 downto 0);
    signal g_V_load_reg_497 : STD_LOGIC_VECTOR (165 downto 0);
    signal select_ln1691_fu_292_p3 : STD_LOGIC_VECTOR (165 downto 0);
    signal select_ln1691_reg_502 : STD_LOGIC_VECTOR (165 downto 0);
    signal r_2_fu_299_p3 : STD_LOGIC_VECTOR (165 downto 0);
    signal r_2_reg_507 : STD_LOGIC_VECTOR (165 downto 0);
    signal grp_bf_mult_1_fu_112_ap_return : STD_LOGIC_VECTOR (165 downto 0);
    signal lambda_V_15_reg_512 : STD_LOGIC_VECTOR (165 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ret_12_fu_347_p2 : STD_LOGIC_VECTOR (165 downto 0);
    signal ret_12_reg_517 : STD_LOGIC_VECTOR (165 downto 0);
    signal grp_bf_mult_2_fu_118_ap_return : STD_LOGIC_VECTOR (165 downto 0);
    signal lhs_V_7_reg_523 : STD_LOGIC_VECTOR (165 downto 0);
    signal lambda_V_16_fu_365_p2 : STD_LOGIC_VECTOR (165 downto 0);
    signal lambda_V_16_reg_528 : STD_LOGIC_VECTOR (165 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ret_fu_381_p2 : STD_LOGIC_VECTOR (165 downto 0);
    signal ret_reg_533 : STD_LOGIC_VECTOR (165 downto 0);
    signal xor_ln1544_11_fu_387_p2 : STD_LOGIC_VECTOR (162 downto 0);
    signal xor_ln1544_11_reg_538 : STD_LOGIC_VECTOR (162 downto 0);
    signal ret_10_fu_394_p2 : STD_LOGIC_VECTOR (165 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_point_double_Pipeline_VITIS_LOOP_25_1_fu_100_ap_start : STD_LOGIC;
    signal grp_point_double_Pipeline_VITIS_LOOP_25_1_fu_100_ap_done : STD_LOGIC;
    signal grp_point_double_Pipeline_VITIS_LOOP_25_1_fu_100_ap_idle : STD_LOGIC;
    signal grp_point_double_Pipeline_VITIS_LOOP_25_1_fu_100_ap_ready : STD_LOGIC;
    signal grp_point_double_Pipeline_VITIS_LOOP_25_1_fu_100_i_out : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_point_double_Pipeline_VITIS_LOOP_25_1_fu_100_i_out_ap_vld : STD_LOGIC;
    signal grp_point_double_Pipeline_VITIS_LOOP_25_15_fu_106_ap_start : STD_LOGIC;
    signal grp_point_double_Pipeline_VITIS_LOOP_25_15_fu_106_ap_done : STD_LOGIC;
    signal grp_point_double_Pipeline_VITIS_LOOP_25_15_fu_106_ap_idle : STD_LOGIC;
    signal grp_point_double_Pipeline_VITIS_LOOP_25_15_fu_106_ap_ready : STD_LOGIC;
    signal grp_point_double_Pipeline_VITIS_LOOP_25_15_fu_106_i_13_out : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_point_double_Pipeline_VITIS_LOOP_25_15_fu_106_i_13_out_ap_vld : STD_LOGIC;
    signal grp_bf_mult_1_fu_112_ap_start : STD_LOGIC;
    signal grp_bf_mult_1_fu_112_ap_done : STD_LOGIC;
    signal grp_bf_mult_1_fu_112_ap_idle : STD_LOGIC;
    signal grp_bf_mult_1_fu_112_ap_ready : STD_LOGIC;
    signal grp_bf_mult_1_fu_112_z_V_read : STD_LOGIC_VECTOR (165 downto 0);
    signal grp_bf_mult_1_fu_112_y_V_read : STD_LOGIC_VECTOR (162 downto 0);
    signal grp_bf_mult_2_fu_118_ap_start : STD_LOGIC;
    signal grp_bf_mult_2_fu_118_ap_done : STD_LOGIC;
    signal grp_bf_mult_2_fu_118_ap_idle : STD_LOGIC;
    signal grp_bf_mult_2_fu_118_ap_ready : STD_LOGIC;
    signal grp_bf_mult_2_fu_118_x_V_read : STD_LOGIC_VECTOR (165 downto 0);
    signal x_0_reg_78 : STD_LOGIC_VECTOR (165 downto 0);
    signal icmp_ln1064_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal storemerge_reg_89 : STD_LOGIC_VECTOR (165 downto 0);
    signal grp_point_double_Pipeline_VITIS_LOOP_25_1_fu_100_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_point_double_Pipeline_VITIS_LOOP_25_15_fu_106_ap_start_reg : STD_LOGIC := '0';
    signal grp_bf_mult_1_fu_112_ap_start_reg : STD_LOGIC := '0';
    signal grp_bf_mult_2_fu_118_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state9_on_subcall_done : BOOLEAN;
    signal u_V_7_fu_50 : STD_LOGIC_VECTOR (165 downto 0);
    signal u_V_fu_327_p2 : STD_LOGIC_VECTOR (165 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal v_V_2_fu_54 : STD_LOGIC_VECTOR (165 downto 0);
    signal v_V_fu_243_p3 : STD_LOGIC_VECTOR (165 downto 0);
    signal g_V_fu_58 : STD_LOGIC_VECTOR (165 downto 0);
    signal g_V_2_fu_236_p3 : STD_LOGIC_VECTOR (165 downto 0);
    signal lambda_V_fu_62 : STD_LOGIC_VECTOR (165 downto 0);
    signal ret_11_fu_332_p2 : STD_LOGIC_VECTOR (165 downto 0);
    signal add_ln28_fu_177_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_2_fu_187_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln28_fu_183_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln65_fu_193_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal j_fu_197_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln69_fu_211_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1691_fu_248_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1691_fu_251_p1 : STD_LOGIC_VECTOR (165 downto 0);
    signal sub_ln1691_fu_267_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1691_2_fu_272_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1691_2_fu_276_p1 : STD_LOGIC_VECTOR (165 downto 0);
    signal r_fu_280_p2 : STD_LOGIC_VECTOR (165 downto 0);
    signal shl_ln1691_fu_255_p2 : STD_LOGIC_VECTOR (165 downto 0);
    signal ashr_ln1691_fu_286_p2 : STD_LOGIC_VECTOR (165 downto 0);
    signal shl_ln1691_2_fu_261_p2 : STD_LOGIC_VECTOR (165 downto 0);
    signal u_V_10_fu_322_p3 : STD_LOGIC_VECTOR (165 downto 0);
    signal lhs_V_9_fu_316_p3 : STD_LOGIC_VECTOR (165 downto 0);
    signal trunc_ln1544_5_fu_356_p1 : STD_LOGIC_VECTOR (162 downto 0);
    signal trunc_ln1544_fu_353_p1 : STD_LOGIC_VECTOR (162 downto 0);
    signal xor_ln904_fu_359_p2 : STD_LOGIC_VECTOR (162 downto 0);
    signal trunc_ln1544_6_fu_377_p1 : STD_LOGIC_VECTOR (162 downto 0);
    signal xor_ln1544_fu_371_p2 : STD_LOGIC_VECTOR (162 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln1068_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (165 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (165 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Radix2wDPM_point_double_Pipeline_VITIS_LOOP_25_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        u_V_9 : IN STD_LOGIC_VECTOR (165 downto 0);
        i_out : OUT STD_LOGIC_VECTOR (15 downto 0);
        i_out_ap_vld : OUT STD_LOGIC );
    end component;


    component Radix2wDPM_point_double_Pipeline_VITIS_LOOP_25_15 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        v_V_4 : IN STD_LOGIC_VECTOR (165 downto 0);
        i_13_out : OUT STD_LOGIC_VECTOR (15 downto 0);
        i_13_out_ap_vld : OUT STD_LOGIC );
    end component;


    component Radix2wDPM_bf_mult_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        z_V_read : IN STD_LOGIC_VECTOR (165 downto 0);
        y_V_read : IN STD_LOGIC_VECTOR (162 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (165 downto 0) );
    end component;


    component Radix2wDPM_bf_mult_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_V_read : IN STD_LOGIC_VECTOR (165 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (165 downto 0) );
    end component;



begin
    grp_point_double_Pipeline_VITIS_LOOP_25_1_fu_100 : component Radix2wDPM_point_double_Pipeline_VITIS_LOOP_25_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_point_double_Pipeline_VITIS_LOOP_25_1_fu_100_ap_start,
        ap_done => grp_point_double_Pipeline_VITIS_LOOP_25_1_fu_100_ap_done,
        ap_idle => grp_point_double_Pipeline_VITIS_LOOP_25_1_fu_100_ap_idle,
        ap_ready => grp_point_double_Pipeline_VITIS_LOOP_25_1_fu_100_ap_ready,
        u_V_9 => u_V_7_fu_50,
        i_out => grp_point_double_Pipeline_VITIS_LOOP_25_1_fu_100_i_out,
        i_out_ap_vld => grp_point_double_Pipeline_VITIS_LOOP_25_1_fu_100_i_out_ap_vld);

    grp_point_double_Pipeline_VITIS_LOOP_25_15_fu_106 : component Radix2wDPM_point_double_Pipeline_VITIS_LOOP_25_15
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_point_double_Pipeline_VITIS_LOOP_25_15_fu_106_ap_start,
        ap_done => grp_point_double_Pipeline_VITIS_LOOP_25_15_fu_106_ap_done,
        ap_idle => grp_point_double_Pipeline_VITIS_LOOP_25_15_fu_106_ap_idle,
        ap_ready => grp_point_double_Pipeline_VITIS_LOOP_25_15_fu_106_ap_ready,
        v_V_4 => v_V_2_fu_54,
        i_13_out => grp_point_double_Pipeline_VITIS_LOOP_25_15_fu_106_i_13_out,
        i_13_out_ap_vld => grp_point_double_Pipeline_VITIS_LOOP_25_15_fu_106_i_13_out_ap_vld);

    grp_bf_mult_1_fu_112 : component Radix2wDPM_bf_mult_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bf_mult_1_fu_112_ap_start,
        ap_done => grp_bf_mult_1_fu_112_ap_done,
        ap_idle => grp_bf_mult_1_fu_112_ap_idle,
        ap_ready => grp_bf_mult_1_fu_112_ap_ready,
        z_V_read => grp_bf_mult_1_fu_112_z_V_read,
        y_V_read => grp_bf_mult_1_fu_112_y_V_read,
        ap_return => grp_bf_mult_1_fu_112_ap_return);

    grp_bf_mult_2_fu_118 : component Radix2wDPM_bf_mult_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bf_mult_2_fu_118_ap_start,
        ap_done => grp_bf_mult_2_fu_118_ap_done,
        ap_idle => grp_bf_mult_2_fu_118_ap_idle,
        ap_ready => grp_bf_mult_2_fu_118_ap_ready,
        x_V_read => grp_bf_mult_2_fu_118_x_V_read,
        ap_return => grp_bf_mult_2_fu_118_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv166_lc_2;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_return_0_preg <= x_0_reg_78;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv166_lc_2;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_return_1_preg <= storemerge_reg_89;
                end if; 
            end if;
        end if;
    end process;


    grp_bf_mult_1_fu_112_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_bf_mult_1_fu_112_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_bf_mult_2_fu_118_ap_done = ap_const_logic_1)))) then 
                    grp_bf_mult_1_fu_112_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bf_mult_1_fu_112_ap_ready = ap_const_logic_1)) then 
                    grp_bf_mult_1_fu_112_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_bf_mult_2_fu_118_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_bf_mult_2_fu_118_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_on_subcall_done)))) then 
                    grp_bf_mult_2_fu_118_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bf_mult_2_fu_118_ap_ready = ap_const_logic_1)) then 
                    grp_bf_mult_2_fu_118_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_point_double_Pipeline_VITIS_LOOP_25_15_fu_106_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_point_double_Pipeline_VITIS_LOOP_25_15_fu_106_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_point_double_Pipeline_VITIS_LOOP_25_15_fu_106_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_point_double_Pipeline_VITIS_LOOP_25_15_fu_106_ap_ready = ap_const_logic_1)) then 
                    grp_point_double_Pipeline_VITIS_LOOP_25_15_fu_106_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_point_double_Pipeline_VITIS_LOOP_25_1_fu_100_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_point_double_Pipeline_VITIS_LOOP_25_1_fu_100_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_point_double_Pipeline_VITIS_LOOP_25_1_fu_100_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_point_double_Pipeline_VITIS_LOOP_25_1_fu_100_ap_ready = ap_const_logic_1)) then 
                    grp_point_double_Pipeline_VITIS_LOOP_25_1_fu_100_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    g_V_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (icmp_ln1064_fu_132_p2 = ap_const_lv1_0))) then 
                g_V_fu_58 <= ap_const_lv166_lc_2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                g_V_fu_58 <= g_V_2_fu_236_p3;
            end if; 
        end if;
    end process;

    lambda_V_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (icmp_ln1064_fu_132_p2 = ap_const_lv1_0))) then 
                lambda_V_fu_62 <= ap_const_lv166_lc_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                lambda_V_fu_62 <= ret_11_fu_332_p2;
            end if; 
        end if;
    end process;

    storemerge_reg_89_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (icmp_ln1064_fu_132_p2 = ap_const_lv1_1))) then 
                storemerge_reg_89 <= ap_const_lv166_lc_2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_bf_mult_1_fu_112_ap_done = ap_const_logic_1))) then 
                storemerge_reg_89 <= ret_10_fu_394_p2;
            end if; 
        end if;
    end process;

    u_V_7_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (icmp_ln1064_fu_132_p2 = ap_const_lv1_0))) then 
                u_V_7_fu_50 <= x_V_read;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                u_V_7_fu_50 <= u_V_fu_327_p2;
            end if; 
        end if;
    end process;

    v_V_2_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (icmp_ln1064_fu_132_p2 = ap_const_lv1_0))) then 
                v_V_2_fu_54 <= ap_const_lv166_lc_3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                v_V_2_fu_54 <= v_V_fu_243_p3;
            end if; 
        end if;
    end process;

    x_0_reg_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (icmp_ln1064_fu_132_p2 = ap_const_lv1_1))) then 
                x_0_reg_78 <= ap_const_lv166_lc_2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_bf_mult_1_fu_112_ap_done = ap_const_logic_1))) then 
                x_0_reg_78 <= ret_reg_533;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                g_V_load_reg_497 <= g_V_fu_58;
                r_2_reg_507 <= r_2_fu_299_p3;
                select_ln1691_reg_502 <= select_ln1691_fu_292_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j_2_reg_485 <= j_2_fu_217_p3;
                tmp_20_reg_491 <= j_2_fu_217_p3(16 downto 16);
                tmp_reg_477 <= j_fu_197_p2(16 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                lambda_V_15_reg_512 <= grp_bf_mult_1_fu_112_ap_return;
                lhs_V_7_reg_523 <= grp_bf_mult_2_fu_118_ap_return;
                ret_12_reg_517 <= ret_12_fu_347_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                lambda_V_16_reg_528 <= lambda_V_16_fu_365_p2;
                ret_reg_533 <= ret_fu_381_p2;
                xor_ln1544_11_reg_538 <= xor_ln1544_11_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_127 <= lambda_V_fu_62;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                v_V_2_load_reg_472 <= v_V_2_fu_54;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, grp_bf_mult_1_fu_112_ap_done, grp_bf_mult_2_fu_118_ap_done, icmp_ln1064_fu_132_p2, ap_CS_fsm_state4, ap_block_state9_on_subcall_done, ap_CS_fsm_state2, icmp_ln1068_fu_161_p2, ap_block_state4_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (icmp_ln1064_fu_132_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (icmp_ln1064_fu_132_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln1068_fu_161_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_bf_mult_2_fu_118_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_bf_mult_1_fu_112_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    add_ln28_2_fu_187_p2 <= std_logic_vector(unsigned(grp_point_double_Pipeline_VITIS_LOOP_25_15_fu_106_i_13_out) + unsigned(ap_const_lv16_1));
    add_ln28_fu_177_p2 <= std_logic_vector(unsigned(grp_point_double_Pipeline_VITIS_LOOP_25_1_fu_100_i_out) + unsigned(ap_const_lv16_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(grp_bf_mult_2_fu_118_ap_done)
    begin
        if ((grp_bf_mult_2_fu_118_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state11_blk_assign_proc : process(grp_bf_mult_1_fu_112_ap_done)
    begin
        if ((grp_bf_mult_1_fu_112_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state12_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(ap_block_state4_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state4_on_subcall_done)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_ST_fsm_state9_blk_assign_proc : process(ap_block_state9_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state9_on_subcall_done)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state4_on_subcall_done_assign_proc : process(grp_point_double_Pipeline_VITIS_LOOP_25_1_fu_100_ap_done, grp_point_double_Pipeline_VITIS_LOOP_25_15_fu_106_ap_done)
    begin
                ap_block_state4_on_subcall_done <= ((grp_point_double_Pipeline_VITIS_LOOP_25_15_fu_106_ap_done = ap_const_logic_0) or (grp_point_double_Pipeline_VITIS_LOOP_25_1_fu_100_ap_done = ap_const_logic_0));
    end process;


    ap_block_state9_on_subcall_done_assign_proc : process(grp_bf_mult_1_fu_112_ap_done, grp_bf_mult_2_fu_118_ap_done)
    begin
                ap_block_state9_on_subcall_done <= ((grp_bf_mult_2_fu_118_ap_done = ap_const_logic_0) or (grp_bf_mult_1_fu_112_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(x_0_reg_78, ap_CS_fsm_state12, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_return_0 <= x_0_reg_78;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(storemerge_reg_89, ap_CS_fsm_state12, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_return_1 <= storemerge_reg_89;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;

    ashr_ln1691_fu_286_p2 <= std_logic_vector(shift_right(signed(g_V_2_fu_236_p3),to_integer(unsigned('0' & zext_ln1691_2_fu_276_p1(31-1 downto 0)))));
    g_V_2_fu_236_p3 <= 
        lambda_V_fu_62 when (tmp_reg_477(0) = '1') else 
        g_V_fu_58;
    grp_bf_mult_1_fu_112_ap_start <= grp_bf_mult_1_fu_112_ap_start_reg;

    grp_bf_mult_1_fu_112_y_V_read_assign_proc : process(y_V_read, ap_CS_fsm_state9, xor_ln1544_11_reg_538, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_bf_mult_1_fu_112_y_V_read <= xor_ln1544_11_reg_538;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_bf_mult_1_fu_112_y_V_read <= y_V_read;
        else 
            grp_bf_mult_1_fu_112_y_V_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bf_mult_1_fu_112_z_V_read_assign_proc : process(reg_127, ap_CS_fsm_state9, lambda_V_16_reg_528, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_bf_mult_1_fu_112_z_V_read <= lambda_V_16_reg_528;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_bf_mult_1_fu_112_z_V_read <= reg_127;
        else 
            grp_bf_mult_1_fu_112_z_V_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_bf_mult_2_fu_118_ap_start <= grp_bf_mult_2_fu_118_ap_start_reg;

    grp_bf_mult_2_fu_118_x_V_read_assign_proc : process(x_V_read, ap_CS_fsm_state9, ret_12_reg_517, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_bf_mult_2_fu_118_x_V_read <= ret_12_reg_517;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_bf_mult_2_fu_118_x_V_read <= x_V_read;
        else 
            grp_bf_mult_2_fu_118_x_V_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_point_double_Pipeline_VITIS_LOOP_25_15_fu_106_ap_start <= grp_point_double_Pipeline_VITIS_LOOP_25_15_fu_106_ap_start_reg;
    grp_point_double_Pipeline_VITIS_LOOP_25_1_fu_100_ap_start <= grp_point_double_Pipeline_VITIS_LOOP_25_1_fu_100_ap_start_reg;
    icmp_ln1064_fu_132_p2 <= "1" when (x_V_read = ap_const_lv166_lc_2) else "0";
    icmp_ln1068_fu_161_p2 <= "1" when (u_V_7_fu_50 = ap_const_lv166_lc_1) else "0";
    j_2_fu_217_p3 <= 
        sub_ln69_fu_211_p2 when (tmp_fu_203_p3(0) = '1') else 
        j_fu_197_p2;
    j_fu_197_p2 <= std_logic_vector(unsigned(zext_ln28_fu_183_p1) - unsigned(zext_ln65_fu_193_p1));
    lambda_V_16_fu_365_p2 <= (ret_12_reg_517 xor ap_const_lv166_lc_1);
    lhs_V_9_fu_316_p3 <= 
        g_V_load_reg_497 when (tmp_reg_477(0) = '1') else 
        reg_127;
    r_2_fu_299_p3 <= 
        ashr_ln1691_fu_286_p2 when (tmp_20_reg_491(0) = '1') else 
        shl_ln1691_2_fu_261_p2;
    r_fu_280_p2 <= std_logic_vector(shift_right(signed(v_V_fu_243_p3),to_integer(unsigned('0' & zext_ln1691_2_fu_276_p1(31-1 downto 0)))));
    ret_10_fu_394_p2 <= (lhs_V_7_reg_523 xor grp_bf_mult_1_fu_112_ap_return);
    ret_11_fu_332_p2 <= (r_2_reg_507 xor lhs_V_9_fu_316_p3);
    ret_12_fu_347_p2 <= (x_V_read xor grp_bf_mult_1_fu_112_ap_return);
    ret_fu_381_p2 <= (lambda_V_16_fu_365_p2 xor grp_bf_mult_2_fu_118_ap_return);
    select_ln1691_fu_292_p3 <= 
        r_fu_280_p2 when (tmp_20_reg_491(0) = '1') else 
        shl_ln1691_fu_255_p2;
        sext_ln1691_2_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1691_fu_267_p2),32));

        sext_ln1691_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_2_reg_485),32));

    shl_ln1691_2_fu_261_p2 <= std_logic_vector(shift_left(unsigned(g_V_2_fu_236_p3),to_integer(unsigned('0' & zext_ln1691_fu_251_p1(31-1 downto 0)))));
    shl_ln1691_fu_255_p2 <= std_logic_vector(shift_left(unsigned(v_V_fu_243_p3),to_integer(unsigned('0' & zext_ln1691_fu_251_p1(31-1 downto 0)))));
    sub_ln1691_fu_267_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(j_2_reg_485));
    sub_ln69_fu_211_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(j_fu_197_p2));
    tmp_fu_203_p3 <= j_fu_197_p2(16 downto 16);
    trunc_ln1544_5_fu_356_p1 <= lambda_V_15_reg_512(163 - 1 downto 0);
    trunc_ln1544_6_fu_377_p1 <= grp_bf_mult_2_fu_118_ap_return(163 - 1 downto 0);
    trunc_ln1544_fu_353_p1 <= x_V_read(163 - 1 downto 0);
    u_V_10_fu_322_p3 <= 
        v_V_2_load_reg_472 when (tmp_reg_477(0) = '1') else 
        u_V_7_fu_50;
    u_V_fu_327_p2 <= (u_V_10_fu_322_p3 xor select_ln1691_reg_502);
    v_V_fu_243_p3 <= 
        u_V_7_fu_50 when (tmp_reg_477(0) = '1') else 
        v_V_2_fu_54;
    xor_ln1544_11_fu_387_p2 <= (xor_ln1544_fu_371_p2 xor trunc_ln1544_6_fu_377_p1);
    xor_ln1544_fu_371_p2 <= (xor_ln904_fu_359_p2 xor ap_const_lv163_lc_1);
    xor_ln904_fu_359_p2 <= (trunc_ln1544_fu_353_p1 xor trunc_ln1544_5_fu_356_p1);
    zext_ln1691_2_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1691_2_fu_272_p1),166));
    zext_ln1691_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1691_fu_248_p1),166));
    zext_ln28_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_fu_177_p2),17));
    zext_ln65_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_2_fu_187_p2),17));
end behav;
