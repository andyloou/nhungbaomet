// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Radix2wDPM_point_double_1_Pipeline_VITIS_LOOP_45_12 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_ph1,
        trunc_ln6,
        p_out,
        p_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [331:0] p_ph1;
input  [164:0] trunc_ln6;
output  [331:0] p_out;
output   p_out_ap_vld;

reg ap_idle;
reg p_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln45_fu_114_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [7:0] i_5_fu_56;
wire   [7:0] i_8_fu_233_p2;
wire    ap_block_pp0_stage0_11001;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [164:0] tmp_V_fu_60;
wire   [164:0] trunc_ln38_fu_163_p1;
reg   [331:0] empty_fu_64;
wire   [331:0] select_ln820_fu_225_p3;
reg   [331:0] empty_48_fu_68;
wire   [331:0] select_ln820_3_fu_217_p3;
wire    ap_block_pp0_stage0_01001;
wire   [165:0] tmp_V_5_fu_133_p3;
wire   [0:0] p_Result_s_fu_141_p3;
wire   [165:0] xor_ln1544_1_fu_149_p2;
wire   [165:0] tmp_V_6_fu_155_p3;
wire   [162:0] zext_ln820_fu_171_p1;
wire   [162:0] shl_ln820_fu_175_p2;
wire   [162:0] p_Val2_10_fu_167_p1;
wire   [162:0] and_ln820_fu_181_p2;
wire   [165:0] lhs_V_fu_193_p4;
wire   [165:0] ret_fu_203_p2;
wire   [165:0] empty_50_fu_129_p1;
wire   [0:0] p_Result_12_fu_187_p2;
wire   [331:0] or_ln_fu_209_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Radix2wDPM_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_48_fu_68 <= p_ph1;
        end else if (((icmp_ln45_fu_114_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_48_fu_68 <= select_ln820_3_fu_217_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_fu_64 <= p_ph1;
        end else if (((icmp_ln45_fu_114_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_fu_64 <= select_ln820_fu_225_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_5_fu_56 <= 8'd1;
        end else if (((icmp_ln45_fu_114_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_5_fu_56 <= i_8_fu_233_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            tmp_V_fu_60 <= trunc_ln6;
        end else if (((icmp_ln45_fu_114_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            tmp_V_fu_60 <= trunc_ln38_fu_163_p1;
        end
    end
end

always @ (*) begin
    if (((icmp_ln45_fu_114_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln45_fu_114_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln820_fu_181_p2 = (shl_ln820_fu_175_p2 & p_Val2_10_fu_167_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign empty_50_fu_129_p1 = empty_fu_64[165:0];

assign i_8_fu_233_p2 = (i_5_fu_56 + 8'd1);

assign icmp_ln45_fu_114_p2 = ((i_5_fu_56 == 8'd163) ? 1'b1 : 1'b0);

assign lhs_V_fu_193_p4 = {{empty_fu_64[331:166]}};

assign or_ln_fu_209_p3 = {{ret_fu_203_p2}, {empty_50_fu_129_p1}};

assign p_Result_12_fu_187_p2 = ((and_ln820_fu_181_p2 == 163'd0) ? 1'b1 : 1'b0);

assign p_Result_s_fu_141_p3 = tmp_V_fu_60[32'd162];

assign p_Val2_10_fu_167_p1 = empty_48_fu_68[162:0];

assign p_out = empty_48_fu_68;

assign ret_fu_203_p2 = (tmp_V_6_fu_155_p3 ^ lhs_V_fu_193_p4);

assign select_ln820_3_fu_217_p3 = ((p_Result_12_fu_187_p2[0:0] == 1'b1) ? empty_48_fu_68 : or_ln_fu_209_p3);

assign select_ln820_fu_225_p3 = ((p_Result_12_fu_187_p2[0:0] == 1'b1) ? empty_fu_64 : or_ln_fu_209_p3);

assign shl_ln820_fu_175_p2 = 163'd1 << zext_ln820_fu_171_p1;

assign tmp_V_5_fu_133_p3 = {{tmp_V_fu_60}, {1'd0}};

assign tmp_V_6_fu_155_p3 = ((p_Result_s_fu_141_p3[0:0] == 1'b1) ? xor_ln1544_1_fu_149_p2 : tmp_V_5_fu_133_p3);

assign trunc_ln38_fu_163_p1 = tmp_V_6_fu_155_p3[164:0];

assign xor_ln1544_1_fu_149_p2 = (tmp_V_5_fu_133_p3 ^ 166'd11692013098647223345629478661730264157247460344009);

assign zext_ln820_fu_171_p1 = i_5_fu_56;

endmodule //Radix2wDPM_point_double_1_Pipeline_VITIS_LOOP_45_12
